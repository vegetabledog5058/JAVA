package EX_JDBC.Utils;

import com.mysql.cj.protocol.Resultset;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author SiYi
 * @version 1.0
 * @date 2023/9/22 16:17
 * @desciption:
 */
public class Util_jdbc<T> implements AutoCloseable{
    //工具类的创建
    private String url;
    private String user;
    private String pass;
    private Connection con;
    private PreparedStatement ps;
    private ResultSet rt;

    static {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public Util_jdbc(String url, String user, String pass) {
        this.url = url;
        this.user = user;
        this.pass = pass;
    }

    public Connection getConnection() {
        if (con == null) {
            try {
                con = DriverManager.getConnection(url, user, pass);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
        return con;
    }

    public void close() {
        if (rt != null) {
            try {
                rt.close();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
        if (ps != null) {
            try {
                ps.close();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
        if (con != null) {
            try {
                con.close();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
            con = null;
        }
    }


    //JDBC增删改查

    public void execute(String sql, int autoGeneratedKeys, Object... params) throws SQLException {
        //首先确保con不为null,获取连接
        getConnection();
        ps = con.prepareStatement(sql, autoGeneratedKeys);
        setParams(params);
    }

    public int update(String sql, int autoGeneratedKeys, Object... params) throws SQLException {
        //首先确保con不为null,获取连接
      execute(sql,Statement.NO_GENERATED_KEYS,params);
        return ps.executeUpdate();
    }

    public int insert(String sql, Object... params) throws SQLException {
        execute(sql, Statement.RETURN_GENERATED_KEYS, params);
        //获取结果集
        rt = ps.getGeneratedKeys();
        return rt.next() ? rt.getInt(1) : -1;
    }

    public int delete(String sql, Object... params) throws SQLException {
        return update(sql, Statement.NO_GENERATED_KEYS, params);

    }

    public T selectOne(String sql,IResultMapper<T>resultMapper, Object... params) throws SQLException {
        execute(sql, Statement.NO_GENERATED_KEYS, params);
        rt = ps.executeQuery();

        if (rt.next()) {
            return resultMapper.mapper(rt);
        }return null;
    }

    public List<T> selectList(String sql, IResultMapper<T>resultMapper,Object... params) throws SQLException {
        execute(sql,Statement.NO_GENERATED_KEYS,params);
        rt = ps.executeQuery();
        List list = new ArrayList<>();
        while (rt.next()){
            T t = resultMapper.mapper(rt);
            list.add(t);
        }
        return list;
    }

    public void setParams(Object... params) throws SQLException {
        if (params != null) {
            for (int i = 0; i < params.length; i++) {
                ps.setObject(i + 1, params[i]);
            }
        }
    }
}

@FunctionalInterface
interface IResultMapper<T> {
    T mapper(ResultSet set);
}

class EmpResultMapper implements IResultMapper<Emp> {

    @Override
    public Emp mapper(ResultSet set) {
        Emp emp = new Emp();
        try {
            emp.setEmpno(set.getInt("empno"));
            emp.setEname(set.getString("ename"));
            emp.setJob(set.getString("job"));
            emp.setHiredate(set.getDate("hiredate"));
            emp.setMgr(set.getInt("mgr"));
            emp.setSal(set.getDouble("SALARY"));
            emp.setComm(set.getDouble("comm"));
            emp.setDeptno(set.getInt("deptno"));
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return emp;
    }
}